==============
OpenSSL How-to
==============

This document describes the basic PKI workflows with the OpenSSL command-line
utilities and with select software and/or hardware implementations of OpenSSL
cryptographic engines.

Basic CA and client workflows
=============================

Generate CA private key
-----------------------

The private key for a self-signed certificate authority can be done with
the following command:

::

  openssl genrsa \
    -out example-ca.key 4096

Generate CSR for the CA private key
-----------------------------------

To generate a certificate signing request for a certificate authority
certificate, do the following:

::

  openssl req \
    -new \
    -days 3650 \
    -key example-ca.key \
    -sha256 \
    -out example-ca.csr

Generate self signed CA certificate
-----------------------------------

To generate a self-signed root CA certificate, execute this command:

::

  openssl req \
    -new \
    -x509 \
    -days 3650 \
    -key example-ca.key \
    -sha256 \
    -out example-ca.crt

Generate user private key
-------------------------

User's private key can be generated by the following:

::

  openssl genrsa \
    -out ./user.key 2048

Generate CSR for the user key
-----------------------------

Certificate signing request for the user's private key generated in the previous
step can be generated by doing this command:

::

  openssl req \
    -new \
    -key ./user.key \
    -out user.csr

Issue user certificate by a CA
------------------------------

The certificate signing request for the user's private key can be used to issue
a user certificate (with serial number 1) by a certificate authority:

::

  openssl x509 \
    -req \
    -in user.csr \
    -CA example-ca.crt \
    -CAkey example-ca.key \
    -set_serial 1 \
    -sha256 \
    -out user.crt

Print certificate information
-----------------------------

The information on a CA or user certificate can be printed with the following
command:

::

  openssl x509 \
    -in user.crt \
    -text

Verify user certificate
-----------------------

The information listed on a user certificate can be verified against the issuing
certificate authority certificate, by doing the following:

::

  openssl verify \
    -CAfile example-ca.crt \
    user.crt 

Add a configuration file
------------------------

If many certificates with very similar properties are issued it might be useful
to define a special configuration file that can be used when creating certificate
signing requests:

::

  mkdir ~/.eagine/
  cat > ~/.eagine/ssl-msgbus.conf << EOD
  oid_section = OIDs

  [req]
  default_bits = 4096
  utf8 = yes
  prompt = yes
  default_md = sha256
  distinguished_name = req_dn

  [OIDs]
  eagiMsgBusNode = 1.3.6.1.4.1.55765.3.1

  [req_dn]
  countryName = Country Name (2 letter code)
  countryName_default = SK
  countryName_min = 2
  countryName_max = 2
  organizationName = Organization name
  organizationName_default = OGLplus.org
  commonName = Common name
  commonName_default = Node name
  eagiMsgBusNode = Is message bus node (TRUE|FALSE)
  eagiMsgBusNode_default = TRUE
  EOD
  --

The command for creating a certificate signing request can be used with
the ``-config`` option specifying the path to the configuration file:

::

  openssl req \
    -new \
    -key ./my_router.key \
    -config ~/.eagine/ssl-msgbus.conf \
    -out my_router.csr

Basic workflows with SoftHSM engine
===================================

Required Debian packages
------------------------

The required packages can be installed on Debian-like systems with ``apt``
by executing the following command:

::

  sudo apt --yes install \
    opensc libengine-pkcs11-openssl1.1 softhsm

Initial setup of SoftHSM
------------------------

The random seed file and the configuration files for the OpenSSL SoftHSM engine
can be created by executing the following:

::

  dd if=/dev/urandom of=~/.rnd bs=256 count=1
  chmod 400 ~/.rnd
  mkdir -p ~/.config/softhsm2
  mkdir ${HOME}/Keys
  echo "directories.tokendir = ${HOME}/Keys" >\
    "${HOME}/.config/softhsm2/softhsm2.conf"

Create a token
--------------

A new SoftHSM security security token, with the label ``eagine`` in the slot 0,
can be created by doing:

::

  softhsm2-util --init-token --label eagine --slot 0

The currently created tokens (slots) can be listed by the following commands:

::

  softhsm2-util --show-slots 
  pkcs11-tool --module /usr/lib/softhsm/libsofthsm2.so -L

Generate a key pair for CA
--------------------------

This command can be used to create a private/public key pair within the SoftHSM
security module in the token (slot) with the label ``eagine``:

::

  pkcs11-tool \
    --module /usr/lib/softhsm/libsofthsm2.so \
    --token eagine \
    --login \
    --keypairgen \
    --key-type rsa:8192 \
    --label "eagine-ca" \
    --usage-sign

Objects within a token (including the key generated in the previous step) can be
listed by the command:

::

  pkcs11-tool \
    --module /usr/lib/softhsm/libsofthsm2.so \
    --token eagine \
    --login \
    --list-objects

Generate a self-signed root CA certificate
------------------------------------------

To generate a self-signed root CA certificate for the key pair (identified as
``eagine-ca``) in the SoftHSM token with label ``eagine``, execute this command:

::

  openssl req \
    -new \
    -x509 \
    -days 3650 \
    -subj '/CN=EAGine certificate authority' \
    -sha512 \
    -engine pkcs11 \
    -keyform engine \
    -key "pkcs11:token=eagine;object=eagine-ca" \
    -out eagine-ca.crt

As already mentioned above the information on the certificate can be listed by:

::

  openssl x509 \
    -in eagine-ca.crt -text

Creating user keys
------------------

For additional security you can optionally create a new token (slot) as above:

::

  softhsm2-util \
    --init-token \
    --label user \
    --slot 1

Then a private/public key pair can be generated in the ``user`` token:

::

  pkcs11-tool \
    --module /usr/lib/softhsm/libsofthsm2.so \
    --token user \
    --login \
    --keypairgen \
    --key-type rsa:2048 \
    --label "eagine-user" \
    --usage-sign

Generate CSR for the user key pair
----------------------------------

A certificate signing request for the user key pair identified by ``eagine-user``
in the SoftHSM token ``user`` can be created by the following command:

::

  openssl req \
    -new \
    -engine pkcs11 \
    -keyform engine \
    -key "pkcs11:token=user;object=eagine-user" \
    -out eagine-user.csr

Issue user certificate by a CA
------------------------------

The certificate signing request for the user's private key can be used to issue
a user certificate (with serial number 1) by the certificate authority using
the SoftHSM token ``eagine``:

::

  openssl x509 \
    -req \
    -CAkeyform engine \
    -engine pkcs11 \
    -in eagine-user.csr \
    -CA eagine-ca.crt \
    -CAkey "pkcs11:token=eagine;object=eagine-ca" \
    -set_serial 1 \
    -sha256 \
    -out eagine-user.crt

As above the newly issued user certificate can be verified against the certificate
authority certificate:

::

  openssl verify \
    -CAfile eagine-ca.crt \
    eagine-user.crt
